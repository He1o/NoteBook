'''
实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。

示例 1：
输入：x = 2.00000, n = 10
输出：1024.00000

示例 2：
输入：x = 2.10000, n = 3
输出：9.26100

示例 3：
输入：x = 2.00000, n = -2
输出：0.25000
解释：2-2 = 1/22 = 1/4 = 0.25

'''

class Solution:
    def myPow(self, x, n):
        '''
        时间复杂度 O(logn)  递归的层数
        空间复杂度 O(logn)
        '''
        def quickMul(n):
            if n == 0:
                return 1.0
            y = quickMul(n // 2)
            return y * y if n % 2 == 0 else y * y * x
        return quickMul(n) if n >= 0 else 1.0 / quickMul(-n)

'''
分治的思想
对于一个指数n
n为偶数时，可以分为 n // 2 和 n // 2 
n为奇数时，可以分为 n // 2 和 n // 2 + 1
正常分治的方法下会分为以上两部分处理接下来的问题，例如对数组一分为二考虑
但在本问题中，n // 2结果都是一样的，因此只需要一次通过迭代得到y = quickMul(n // 2)
然后y * y，当n为奇数时，只需要再乘以一个x
最终的返回条件，当n为0时，返回1，
当n为1时，返回1 * 1 * x = x
当n为2时，返回x * x
'''